{"version":3,"sources":["Game.js","App.js","index.js"],"names":["cellCaps","bomb","flag","target","fresh","cellValues","void","directions","densities","freshCell","cap","value","r","c","voidCell","getAllNeighbors","grid","cell","neighbors","Object","values","forEach","dir","neighbor","direction","edge","C","N","NE","length","E","SE","S","SW","W","NW","onEdge","hDistance","vDistance","includes","getNeighbor","push","allNeighborMinesFlagged","filter","n","createGameBoard","density","arguments","undefined","aGrid","size","result","_objectSpread","generateBlankGrid","bGrid","Math","random","plantBombs","cGrid","_loop","newValue","setValues","Cell","_ref","onCellClick","onCellRightClick","_jsx","className","onClick","onContextMenu","e","children","Row","_ref2","row","map","concat","Game","_useState","useState","_useState2","_slicedToArray","board","setBoard","_useState3","_useState4","game","setGame","gameSizes","_useState5","_useState6","gameSize","setGameSize","gameDifs","_useState7","_useState8","gameDif","setGameDif","_useState9","_useState10","scale","setScale","reveal","bypass","newBoard","_toConsumableArray","console","log","checkGame","gameWon","loseGame","preventDefault","newCell","_jsxs","style","fontSize","Number","slice","indexOf","onChange","gs","gd","i","App","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.0e18cd02.chunk.js","sourcesContent":["import { useState } from \"react\";\n\n// enum for all possible cell caps\n// all cell images. Initially they're all 'fresh'\nconst cellCaps = {\n  bomb: \"💣\",\n  \"-2\": \"💣\",\n  flag: \"❓\",\n  \"-1\": \"❓\",\n  target: \"🎯\",\n  \"-4\": \"🎯\",\n  fresh: \"⬜\",\n  0: \"🟩\",\n  1: \"1️⃣\",\n  2: \"2️⃣\",\n  3: \"3️⃣\",\n  4: \"4️⃣\",\n  5: \"5️⃣\",\n  6: \"6️⃣\",\n  7: \"7️⃣\",\n  8: \"8️⃣\"\n};\n\n// enum for possible cell values\nconst cellValues = {\n  target: -4,\n  void: -3,\n  bomb: -2,\n  flag: -1,\n  fresh: 0,\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8\n};\n\nconst directions = {\n  0: \"N\",\n  1: \"NE\",\n  2: \"E\",\n  3: \"SE\",\n  4: \"S\",\n  5: \"SW\",\n  6: \"W\",\n  7: \"NW\"\n};\n\nconst densities = [0.05, 0.125, 0.25];\n\nconst freshCell = { cap: cellCaps.fresh, value: cellValues[0], r: 0, c: 0 };\nconst voidCell = { cap: cellCaps.fresh, value: cellValues.void, r: -1, c: -1 };\n\n// checks which edged the cell is touching\nconst onEdge = (grid, cell) => ({\n  C: true,\n  N: cell.r === 0,\n  NE: cell.r === 0 || cell.c === grid[0].length - 1,\n  E: cell.c === grid[0].length - 1,\n  SE: cell.c === grid[0].length - 1 || cell.r === grid.length - 1,\n  S: cell.r === grid.length - 1,\n  SW: cell.r === grid.length - 1 || cell.c === 0,\n  W: cell.c === 0,\n  NW: cell.c === 0 || cell.r === 0\n});\n\n// get neighbor cell: returns the cell object at direction\nconst getNeighbor = (grid, cell, direction) => {\n  const edge = onEdge(grid, cell);\n\n  let hDistance = 0;\n  let vDistance = 0;\n\n  if (direction.includes(\"E\")) hDistance = 1;\n  else if (direction.includes(\"W\")) hDistance = -1;\n\n  if (direction.includes(\"N\")) vDistance = -1;\n  else if (direction.includes(\"S\")) vDistance = 1;\n\n  let neighbor = voidCell;\n\n  if (!edge[direction]) neighbor = grid[cell.r + vDistance][cell.c + hDistance];\n\n  return neighbor;\n};\n\n// get all neighbors\nconst getAllNeighbors = (grid, cell) => {\n  const neighbors = [];\n\n  Object.values(directions).forEach((dir) => {\n    const neighbor = getNeighbor(grid, cell, dir);\n    neighbors.push(neighbor);\n  });\n  return neighbors;\n};\n\nconst allNeighborMinesFlagged = (grid, cell) => {\n  const neighbors = getAllNeighbors(grid, cell);\n\n  const neighborMines = neighbors.filter((n) => n.value === cellValues.bomb);\n\n  const unflaggedMines = neighborMines.filter(\n    (n) => ![cellCaps.flag, cellCaps.target].includes(n.cap)\n  );\n\n  const result = unflaggedMines.length === 0;\n\n  return result;\n};\n\n// 1. generates a square grid [size * size]\nconst generateBlankGrid = (size = 12) => {\n  const result = [];\n\n  for (let r = 0; r < size; r++) {\n    result[r] = [];\n    for (let c = 0; c < size; c++) {\n      result[r].push({ ...freshCell, r, c });\n    }\n  }\n\n  return result;\n};\n\n// 2. randomly adds bombs to a grid\nconst plantBombs = (grid = [], density) => {\n  if (grid.length < 1) return grid;\n\n  for (let r = 0; r < grid.length; r++) {\n    for (let c = 0; c < grid[r].length; c++) {\n      const chance = Math.random();\n      if (chance < densities[density]) {\n        grid[r][c].value = cellValues.bomb;\n      }\n    }\n  }\n\n  return grid;\n};\n\n// 3. set cell values to represent number of neighboring bombs\nconst setValues = (grid = []) => {\n  if (grid.length < 1) return grid;\n\n  for (let r = 0; r < grid.length; r++) {\n    for (let c = 0; c < grid[r].length; c++) {\n      const cell = grid[r][c];\n      if (cell.value !== cellValues.bomb) {\n        const neighbors = getAllNeighbors(grid, cell);\n        let newValue = 0;\n        neighbors.forEach((n) => {\n          if (n.value === cellValues.bomb) {\n            newValue++;\n          }\n        });\n        grid[r][c].value = newValue;\n      }\n    }\n  }\n\n  return grid;\n};\n\nconst createGameBoard = (size = 12, density = 1) => {\n  let aGrid = generateBlankGrid(size);\n  let bGrid = plantBombs(aGrid, density);\n  let cGrid = setValues(bGrid);\n  return cGrid;\n};\n\nfunction Cell({ cell, onCellClick, onCellRightClick }) {\n  return (\n    <span\n      className=\"cell\"\n      onClick={() => onCellClick(cell)}\n      onContextMenu={(e) => onCellRightClick(e, cell)}\n    >\n      {cell.cap}\n    </span>\n  );\n}\n\nfunction Row({ row, onCellClick, onCellRightClick }) {\n  return (\n    <div className=\"row\">\n      {row.map((cell) => {\n        return (\n          <Cell\n            key={`${cell.r}-${cell.c}`}\n            cell={cell}\n            onCellClick={onCellClick}\n            onCellRightClick={onCellRightClick}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default function Game() {\n  const [board, setBoard] = useState([]);\n\n  const [game, setGame] = useState(\"\");\n\n  const gameSizes = [\"12x12\", \"20x20\", \"32x32\"];\n\n  const [gameSize, setGameSize] = useState(gameSizes[0]);\n\n  const gameDifs = [\"🐶\", \"🦁\", \"🦍\"];\n\n  const [gameDif, setGameDif] = useState(gameDifs[0]);\n\n  const [scale, setScale] = useState(1);\n\n  const newGame = () => {\n    const size = Number(gameSize.slice(0, 2));\n    const density = gameDifs.indexOf(gameDif);\n    const game = createGameBoard(size, density);\n    setBoard(game);\n    setGame(gameDif);\n    setScale(40 / size);\n  };\n\n  const loseGame = () => {\n    const newBoard = [...board];\n\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board[r].length; c++) {\n        newBoard[r][c].cap = cellCaps[board[r][c].value];\n      }\n    }\n\n    setBoard(newBoard);\n    setGame(\"☠️\");\n  };\n\n  const reveal = (cell, bypass = false) => {\n    let newBoard = [...board];\n    if (cell.value > 0 && !bypass) {\n      newBoard[cell.r][cell.c].cap = cellCaps[cell.value];\n      // if cell is revealed && all neighboring mines are flagged\n      if (cell.cap !== cellCaps.fresh && allNeighborMinesFlagged(board, cell)) {\n        console.log(11);\n        reveal(cell, true);\n      }\n    }\n    if (cell.value === 0 || bypass === true) {\n      console.log(\"BP\");\n      newBoard[cell.r][cell.c].cap = cellCaps[cell.value];\n      // reveal all neighbor cells to the edge of > 0\n      const neighbors = getAllNeighbors(board, cell);\n      neighbors.forEach((n) => {\n        if (\n          n.value !== cellValues.bomb &&\n          n !== voidCell &&\n          cellCaps[n.value] !== n.cap\n        ) {\n          newBoard[n.r][n.c].cap = cellCaps[newBoard[n.r][n.c].value];\n          if (n.value === 0) {\n            console.log(\"r\", n.cap, cellCaps[n.value], n.value);\n            reveal(n);\n          }\n        }\n      });\n    }\n    setBoard(newBoard);\n  };\n\n  const checkGame = () => {\n    let gameWon = true;\n    for (let r = 0; r < board.length; r++) {\n      for (let c = 0; c < board[r].length; c++) {\n        const cell = board[r][c];\n        if (cell.cap === cellCaps.fresh) gameWon = false;\n      }\n    }\n\n    if (gameWon) setGame(\"🏆\");\n  };\n\n  const onCellClick = (cell) => {\n    if (cell.value === cellValues.bomb) loseGame();\n    else {\n      reveal(cell);\n      checkGame();\n    }\n  };\n\n  const onCellRightClick = (e, cell) => {\n    e.preventDefault();\n    const newBoard = [...board];\n    const newCell = { ...cell };\n    if (cell.cap === cellCaps.target) {\n      newCell.cap = cellCaps.fresh;\n    } else if (cell.cap === cellCaps.flag) {\n      newCell.cap = cellCaps.target;\n    } else {\n      newCell.cap = cellCaps.flag;\n    }\n    newBoard[cell.r][cell.c] = newCell;\n    setBoard(newBoard);\n    checkGame();\n  };\n\n  return (\n    <div style={{ fontSize: \"1em\" }}>\n      <button style={{ fontSize: \"2.4em\" }} onClick={newGame}>\n        New Game\n      </button>\n      <select\n        style={{ fontSize: \"2.5em\" }}\n        value={gameSize}\n        onChange={(e) => setGameSize(e.target.value)}\n      >\n        {gameSizes.map((gs) => (\n          <option key={gs} value={gs}>\n            {gs}\n          </option>\n        ))}\n      </select>\n      <select\n        style={{ fontSize: \"2.5em\" }}\n        value={gameDif}\n        onChange={(e) => setGameDif(e.target.value)}\n      >\n        {gameDifs.map((gd) => (\n          <option key={gd} value={gd}>\n            {gd}\n          </option>\n        ))}\n      </select>\n      <br />\n      <span style={{ fontSize: \"2.5em\" }}>{game}</span>\n      {board.length > 0 && (\n        <div className=\"BoardWrap\" style={{ fontSize: `${scale}em` }}>\n          {board.map((r, i) => (\n            <Row\n              key={`row-${i}`}\n              row={r}\n              onCellClick={onCellClick}\n              onCellRightClick={onCellRightClick}\n            />\n          ))}\n          <br />\n        </div>\n      )}\n    </div>\n  );\n}\n","import \"./styles.css\";\nimport Game from \"./Game.js\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h2>Minefield: a game</h2>\n      <Game />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}